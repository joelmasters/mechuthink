{"version":3,"sources":["phrases.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","phrases","App","useState","Math","floor","random","length","phrase","setPhrase","Container","Phrase","NextButton","onClick","styled","div","button","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yFAkGAA,EAAOC,QAAU,CACfC,QAnGc,CACd,aACA,gBACA,gBACA,iBACA,uBACA,kBACA,kBACA,iBACA,oBACA,0BACA,qBACA,oBACA,gBACA,mCACA,sBACA,4BACA,QACA,gBACA,+BACA,mBACA,iBACA,6BACA,+BACA,qBACA,yCACA,yBACA,cACA,qBACA,eACA,YACA,yBACA,kBACA,mBACA,UACA,eACA,qBACA,kBACA,eACA,2BACA,WACA,cACA,WACA,aACA,0BACA,0BACA,kCACA,uBACA,uCACA,sBACA,2BACA,+BACA,QACA,gBACA,eACA,qBACA,iBACA,UACA,UACA,mBACA,oBACA,wBACA,qBACA,kBACA,iBACA,QACA,oBACA,UACA,kCACA,mDACA,4BACA,0BACA,8BACA,+BACA,uBACA,0BACA,sBACA,iBACA,iBACA,uBACA,aACA,cACA,kBACA,2CACA,4BACA,oBACA,4BACA,iCACA,4BACA,qBACA,2BACA,iBACA,qBACA,mBACA,eACA,gB,0xBCxEaC,MAlBf,WAAgB,IAAD,EAEeC,mBAASF,UAAQG,KAAKC,MAAMD,KAAKE,SAASL,UAAQM,UAFjE,mBAENC,EAFM,KAEEC,EAFF,KAIb,OACE,kBAACC,EAAD,KACE,kBAACC,EAAD,KACGH,GAEH,kBAACI,EAAD,CAAYC,QAAS,kBACnBJ,EAAUR,UAAQG,KAAKC,MAAMD,KAAKE,SAASL,UAAQM,YADrD,UAWAG,EAAYI,IAAOC,IAAV,KASTJ,EAASG,IAAOC,IAAV,KAONH,EAAaE,IAAOE,OAAV,KC7BIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.72cd58c5.chunk.js","sourcesContent":["const phrases = [\n  \"Look above\",\n  \"Think outside\",\n  \"Push and pull\",\n  \"Think BIGGGGGG\",\n  \"Map it and reduce it\",\n  \"Give it a shake\",\n  \"Shapes of pasta\",\n  \"Organic design\",\n  \"Simulated results\",\n  \"Cats can jump real high\",\n  \"Fold it like paper\",\n  \"Gyroscopic motion\",\n  \"Nanoparticles\",\n  \"Squares, triangles, and octagons\",\n  \"Flip it upside-down\",\n  \"Rotate left for 2 seconds\",\n  \"Twist\",\n  \"Circuit board\",\n  \"Cool it down then heat it up\",\n  \"Form connections\",\n  \"Break the mold\",\n  \"Put the mold back together\",\n  \"What happens if you drop it?\",\n  \"Use it blindfolded\",\n  \"Imagine a long crank to get it started\",\n  \"What if it could talk?\",\n  \"Ocean waves\",\n  \"Stealth technology\",\n  \"Ironman suit\",\n  \"Cardboard\",\n  \"Lasers, lasers, lasers\",\n  \"Firing a cannon\",\n  \"Ship in a bottle\",\n  \"Shaving\",\n  \"Wood carving\",\n  \"3D printing ograns\",\n  \"The next cyborg\",\n  \"The Jettsons\",\n  \"Building of the Pyramids\",\n  \"Trade up\",\n  \"Big brother\",\n  \"Drifting\",\n  \"Hydroplane\",\n  \"Make it from primitives\",\n  \"Draw with opposite hand\",\n  \"Plug your brain into a computer\",\n  \"Fly around for a bit\",\n  \"What if you were the size of an ant?\",\n  \"Let's go for a walk\",\n  \"Circle, circle, dot, dot\",\n  \"Keep it secret, keep it safe\",\n  \"Drill\",\n  \"Screw threads\",\n  \"Diving board\",\n  \"Compression spring\",\n  \"Torsion spring\",\n  \"Gearbox\",\n  \"Casting\",\n  \"Volcano erupting\",\n  \"Pour molten metal\",\n  \"Fix the point of view\",\n  \"What is the point?\",\n  \"Help the others\",\n  \"Face the facts\",\n  \"Prism\",\n  \"Crystals in caves\",\n  \"Explode\",\n  \"Shatter the glass into fractals\",\n  \"Imagine being the world's greatest mathematician\",\n  \"Albert Einstein for a day\",\n  \"Drop a key on the floor\",\n  \"Build it and they will come\",\n  \"Everything the light touches\",\n  \"See through the dark\",\n  \"Potter shaping the clay\",\n  \"Feel with your mind\",\n  \"Make it harder\",\n  \"Make it softer\",\n  \"It feels really cold\",\n  \"Tesla coil\",\n  \"Tank tracks\",\n  \"Deer footprints\",\n  \"Put the shapes into the holes in the box\",\n  \"What if it were stretchy?\",\n  \"Don't let it snap\",\n  \"Throw it against the wall\",\n  \"There's beauty in imperfection\",\n  \"1-step, 2-step, 3-step, 4\",\n  \"Stages of its life\",\n  \"You love working with it\",\n  \"It's beautiful\",\n  \"Make it impossible\",\n  \"Make it dissolve\",\n  \"Ant colonies\",\n  \"Satellites\",\n]\n\nmodule.exports = {\n  phrases,\n}","import React, { useState } from 'react';\nimport './App.css';\nimport styled from 'styled-components';\nimport { phrases } from './phrases';\n\nfunction App() {\n\n  const [phrase, setPhrase] = useState(phrases[Math.floor(Math.random()*phrases.length)]);\n\n  return (\n    <Container>\n      <Phrase>\n        {phrase}\n      </Phrase>\n      <NextButton onClick={() => \n        setPhrase(phrases[Math.floor(Math.random()*phrases.length)])\n      }>\n        Next\n      </NextButton>\n    </Container>\n  );\n}\n\nexport default App;\n\nconst Container = styled.div`\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Phrase = styled.div`\n  font-size: 20px;\n  text-align: center;\n  color: #000;\n  margin-bottom: 100px;\n`;\n\nconst NextButton = styled.button`\n  cursor: pointer;\n  background-color: steelblue;\n  color: #FFF;\n  border-radius: 5px;\n  height: 40px;\n  line-height: 40px;\n  width: 120px;\n  font-size: 20px;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}